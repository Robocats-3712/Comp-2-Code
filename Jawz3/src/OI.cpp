// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/Drive.h"
#include "Commands/elevatorDown.h"
#include "Commands/elevatorPID.h"
#include "Commands/elevatorUp.h"
#include "Commands/intakeIn.h"
#include "Commands/intakeOut.h"
#include "Commands/jawzClose.h"
#include "Commands/jawzOpen.h"
#include "Commands/liftDown.h"
#include "Commands/liftUp.h"
#include "Commands/tiltBack.h"
#include "Commands/tiltForward.h"
#include "Commands/zeroYaw.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    controller.reset(new frc::Joystick(0));
    
    //button10.reset(new frc::JoystickButton(controller.get(), 10));
    //button10->WhenPressed(new elevatorPID(4.87));
    button8.reset(new frc::JoystickButton(controller.get(), 8));
    button8->WhenPressed(new liftUp());
    button7.reset(new frc::JoystickButton(controller.get(), 7));
    button7->WhenPressed(new liftDown());
    button6.reset(new frc::JoystickButton(controller.get(), 6));
    button6->WhenPressed(new intakeIn());
    button5.reset(new frc::JoystickButton(controller.get(), 5));
    button5->WhenPressed(new intakeOut());
    button3.reset(new frc::JoystickButton(controller.get(), 3));
    button3->WhenPressed(new elevatorDown());
    button2.reset(new frc::JoystickButton(controller.get(), 2));
    button2->WhenPressed(new elevatorUp());
    button9.reset(new frc::JoystickButton(controller.get(), 9));
    button9->WhenPressed(new zeroYaw());
    button1.reset(new frc::JoystickButton(controller.get(), 1));
    button1->WhenPressed(new jawzOpen());
    button4.reset(new frc::JoystickButton(controller.get(), 4));
    button4->WhenPressed(new jawzClose());
    button11.reset(new frc::JoystickButton(controller.get(), 11));
    button11->WhenPressed(new tiltBack());
    button12.reset(new frc::JoystickButton(controller.get(), 12));
    button12->WhenPressed(new tiltForward());

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("elevatorDown", new elevatorDown());
    frc::SmartDashboard::PutData("elevatorUp", new elevatorUp());
    frc::SmartDashboard::PutData("intakeOut", new intakeOut());
    frc::SmartDashboard::PutData("intakeIn", new intakeIn());
    frc::SmartDashboard::PutData("jawzClose", new jawzClose());
    frc::SmartDashboard::PutData("jawzOpen", new jawzOpen());
    frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getController() {
   return controller;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
