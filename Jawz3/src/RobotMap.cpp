// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"
#include "WPILib.h"
#include "AHRS.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseSubfrontLeft;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseSubrearLeft;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseSubfrontRight;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveBaseSubrearRight;
std::shared_ptr<AHRS> RobotMap::driveBaseSubgyro;
std::shared_ptr<MecanumDrive> RobotMap::driveBaseSubm_drive;
std::shared_ptr<Compressor> RobotMap::liftCompressor;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::liftsLift;
std::shared_ptr<frc::SpeedController> RobotMap::intakeleftClaw;
std::shared_ptr<frc::SpeedController> RobotMap::intakerightClaw;
std::shared_ptr<frc::SpeedController> RobotMap::intakeleftIntake;
std::shared_ptr<frc::SpeedController> RobotMap::intakerightIntake;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::elevatorelevatorPot;
std::shared_ptr<frc::SpeedController> RobotMap::elevatorelevatorDrive;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::tiltsTilt;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    //frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveBaseSubfrontLeft.reset(new WPI_TalonSRX(12));
    
    
    driveBaseSubrearLeft.reset(new WPI_TalonSRX(11));
    
    
    driveBaseSubfrontRight.reset(new WPI_TalonSRX(13));
    
    
    driveBaseSubrearRight.reset(new WPI_TalonSRX(10));
    
    
    driveBaseSubm_drive.reset(new frc::MecanumDrive(*driveBaseSubfrontLeft, *driveBaseSubrearLeft,
              *driveBaseSubfrontRight, *driveBaseSubrearRight));
    //lw->AddActuator("DriveBaseSub", "m_drive", driveBaseSubm_drive);
    driveBaseSubm_drive->SetSafetyEnabled(true);
        driveBaseSubm_drive->SetExpiration(0.1);
        driveBaseSubm_drive->SetMaxOutput(1.0);

    driveBaseSubgyro.reset(new AHRS(SPI::Port::kMXP));

    liftCompressor.reset(new frc::Compressor(0));
    //lw->AddActuator("Lift", "Compressor", liftCompressor);
    
    liftsLift.reset(new frc::DoubleSolenoid(0, 0, 1));
    //lw->AddActuator("Lift", "sLift", liftsLift);
    
    intakeleftClaw.reset(new frc::Spark(3));
    //lw->AddActuator("Intake", "leftClaw", std::static_pointer_cast<frc::Spark>(intakeleftClaw));
    
    intakerightClaw.reset(new frc::Spark(4));
    //lw->AddActuator("Intake", "rightClaw", std::static_pointer_cast<frc::Spark>(intakerightClaw));
    
    intakeleftIntake.reset(new frc::Spark(1));
    //lw->AddActuator("Intake", "leftIntake", std::static_pointer_cast<frc::Spark>(intakeleftIntake));
    
    intakerightIntake.reset(new frc::Spark(2));
    //lw->AddActuator("Intake", "rightIntake", std::static_pointer_cast<frc::Spark>(intakerightIntake));
    
    elevatorelevatorPot.reset(new frc::AnalogPotentiometer(0, 5.0, 0.0));
    //lw->AddSensor("Elevator", "elevatorPot", elevatorelevatorPot);
    
    elevatorelevatorDrive.reset(new frc::Spark(0));
    //lw->AddActuator("Elevator", "elevatorDrive", std::static_pointer_cast<frc::Spark>(elevatorelevatorDrive));
    
    tiltsTilt.reset(new frc::DoubleSolenoid(0, 2, 3));
    //lw->AddActuator("Tilt", "sTilt", tiltsTilt);
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
